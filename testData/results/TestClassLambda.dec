package pkg;

import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.OptionalInt;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.IntBinaryOperator;
import java.util.function.Supplier;

public class TestClassLambda {
   public int field = 0;
   public int afield = 0;
   private static TestClassLambda.Totals[] mine = new TestClassLambda.Totals[]{new TestClassLambda.Totals()};
   private Map<String, TestClassLambda.Totals> totals = new HashMap<>();

   public String testLambda0() {
      List<TestClassLambda.Totals> ab = new ArrayList<>();// 34
      ab.add(new TestClassLambda.Totals());// 35
      ab.sort(Comparator.comparingInt((ax) -> ax.athing));// 36
      List<String> a = this.getStringList(null);// 38
      a.forEach((aa) -> {// 40
         TestClassLambda.Totals var10000 = (TestClassLambda.Totals)this.totals.put(aa.intern(), new TestClassLambda.Totals());// 41
      });// 42
      a.forEach((aa) -> mine[0] = (TestClassLambda.Totals)this.totals.put(aa.intern(), new TestClassLambda.Totals()));// 43 44
      this.totals.put("abc", new TestClassLambda.Totals());// 45 46
      this.totals.put("def", new TestClassLambda.Totals());// 47
      return "abc";// 48
   }

   public int compareThings(String a) {
      return 0;// 57
   }

   public List<String> getStringList(Object o) {
      return new ArrayList<>();// 61
   }

   public Map<String, TestClassLambda.Totals> getMapping(String abc) {
      return new HashMap<>();// 65
   }

   public String testLambda00() {
      return this.handleVerification(() -> {// 69
         Map<String, String> response = this.doSmthn(this.field, this.afield);// 70
         if (!response.containsKey("field")) {// 71
            this.doSmthnElse(this.field, this.afield);// 72
         }

         return response;// 74
      });
   }

   public String testLambda000() {
      return this.handleVerification(() -> {// 79
         Map<String, String> response = this.doSmthn(this.field, this.afield);// 80
         if (!response.containsKey("field")) {// 81
            this.doSmthnElse(this.field, this.afield);// 82
            return response;// 83
         } else {
            return this.handleElse(() -> {// 85
               if (this.field == 0 && this.afield == 0) {// 86
                  Map<String, String> aThing = this.doSmthn(this.afield, this.afield);// 87
                  aThing.put("aaa", "bbb");// 88
                  return (String)aThing.get("aaa");// 89
               } else {
                  return this.field == 1 ? this.getClass().getName() : String.valueOf(this.afield);// 91
               }
            });
         }
      });
   }

   private Map<String, String> doSmthn(int a, int b) {
      return new HashMap<>();// 99
   }

   private void doSmthnElse(int a, int b) {
   }// 102

   private String handleVerification(Supplier<Map<String, String>> supplier) {
      return "";// 105
   }

   private Map<String, String> handleElse(Supplier<String> supplier) {
      return new HashMap<>();// 109
   }

   public void testLambda() {
      List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);// 113
      int b = (int)(Math.random() * 5.0D);// 114
      list.forEach((n) -> {// 116
         int a = 2 * n;// 117
         System.out.println(a + b + this.field);// 118
      });// 119
   }// 120

   public void testLambda1() {
      int a = (int)(Math.random() * 5.0D);// 123
      Runnable r1 = () -> System.out.println("hello1" + a);// 124
      Runnable r2 = () -> System.out.println("hello2" + a);// 125
   }// 126

   public void testLambda2() {
      AtomicInteger aa = new AtomicInteger(0);// 129
      reduce(Math::max);// 130
      reduce((left, right) -> Math.max(left, right));// 131
      reduce((left, right) -> this.field == 1 ? this.field + left : this.field + right);// 132
      reduce((left, right) -> aa.getAndSet(this.field == 1 ? this.field + left : this.field + right));// 133
   }// 134

   public void testLambda3() {
      reduce(Math::max);// 137
   }// 138

   public void testLambda4() {
      reduce(TestClassLambda::localMax);// 141
   }// 142

   public void testLambda5() {
      String x = "abcd";// 145
      Objects.requireNonNull(x);// 146
      function(x::toString);
   }// 147

   public void testLambda6() {
      List<String> list = new ArrayList<>();// 150
      int bottom = list.size() * 2;// 151
      int top = list.size() * 5;// 152
      list.removeIf((s) -> bottom >= s.length() && s.length() <= top);// 153
   }// 154

   public static void testLambda7(Annotation[] annotations) {
      Arrays.stream(annotations).map(Annotation::annotationType);// 157
   }// 158

   public static OptionalInt reduce(IntBinaryOperator op) {
      return null;// 161
   }

   public static String function(Supplier<String> supplier) {
      return (String)supplier.get();// 165
   }

   public static int localMax(int first, int second) {
      return 0;// 169
   }

   public void nestedLambdas() {
      int a = 5;// 173
      Runnable r1 = () -> {
         Runnable r2 = () -> System.out.println("hello2" + a);// 175
         System.out.println("hello1" + a);// 176
      };// 174 177
   }// 178

   public static class Totals {
      public int athing;
      public boolean bthing;
   }
}

class 'pkg/TestClassLambda' {
   method 'lambda$testLambda0$0 (Lpkg/TestClassLambda$Totals;)I' {
      1      24
      4      24
   }

   method 'lambda$testLambda0$1 (Ljava/lang/String;)V' {
      1      27
      5      27
      f      27
      14      27
      18      28
   }

   method 'lambda$testLambda0$2 (Ljava/lang/String;)V' {
      0      29
      3      29
      5      29
      9      29
      13      29
      18      29
      1b      29
      1c      30
   }

   method 'testLambda0 ()Ljava/lang/String;' {
      7      22
      10      23
      1c      24
      1f      24
      25      25
      26      25
      29      25
      31      26
      3d      29
      43      30
      46      30
      4f      30
      56      31
      59      31
      62      31
      68      32
      6a      32
   }

   method 'compareThings (Ljava/lang/String;)I' {
      0      36
      1      36
   }

   method 'getStringList (Ljava/lang/Object;)Ljava/util/List;' {
      7      40
   }

   method 'getMapping (Ljava/lang/String;)Ljava/util/Map;' {
      7      44
   }

   method 'lambda$testLambda00$3 ()Ljava/util/Map;' {
      2      49
      6      49
      9      49
      c      49
      e      50
      10      50
      15      50
      1a      51
      1e      51
      21      51
      25      54
   }

   method 'testLambda00 ()Ljava/lang/String;' {
      7      48
      a      48
   }

   method 'lambda$testLambda000$4 ()Ljava/lang/String;' {
      1      66
      4      66
      8      66
      b      66
      10      67
      14      67
      17      67
      1a      67
      1c      68
      1e      68
      20      68
      27      69
      29      69
      2e      69
      31      69
      33      71
      36      71
      37      71
      3b      71
      3e      71
      45      71
      48      71
      4b      71
   }

   method 'lambda$testLambda000$5 ()Ljava/util/Map;' {
      2      60
      6      60
      9      60
      c      60
      e      61
      10      61
      15      61
      1a      62
      1e      62
      21      62
      25      63
      2d      65
      30      65
   }

   method 'testLambda000 ()Ljava/lang/String;' {
      7      59
      a      59
   }

   method 'doSmthn (II)Ljava/util/Map;' {
      7      79
   }

   method 'doSmthnElse (II)V' {
      0      83
   }

   method 'handleVerification (Ljava/util/function/Supplier;)Ljava/lang/String;' {
      0      86
      2      86
   }

   method 'handleElse (Ljava/util/function/Supplier;)Ljava/util/Map;' {
      7      90
   }

   method 'lambda$testLambda$6 (ILjava/lang/Integer;)V' {
      0      97
      2      97
      5      97
      6      97
      7      98
      c      98
      e      98
      11      98
      12      98
      15      99
   }

   method 'testLambda ()V' {
      7      94
      8      94
      e      94
      f      94
      15      94
      16      94
      1c      94
      1d      94
      23      94
      24      94
      2a      94
      2c      94
      33      94
      35      94
      39      94
      3c      94
      3d      95
      40      95
      43      95
      44      95
      45      95
      4e      96
      53      100
   }

   method 'lambda$testLambda1$7 (I)V' {
      0      104
      4      104
      9      104
      c      105
   }

   method 'lambda$testLambda1$8 (I)V' {
      0      105
      4      105
      9      105
      c      106
   }

   method 'testLambda1 ()V' {
      0      103
      3      103
      6      103
      7      103
      8      103
      f      104
      16      105
      17      106
   }

   method 'lambda$testLambda2$9 (II)I' {
      2      111
      5      111
   }

   method 'lambda$testLambda2$10 (II)I' {
      1      112
      4      112
      5      112
      9      112
      d      112
      12      112
      16      112
      17      112
   }

   method 'lambda$testLambda2$11 (Ljava/util/concurrent/atomic/AtomicInteger;II)I' {
      2      113
      5      113
      6      113
      a      113
      e      113
      13      113
      17      113
      18      113
      1b      113
   }

   method 'testLambda2 ()V' {
      4      109
      8      109
      e      110
      17      111
      21      112
      2c      113
      30      114
   }

   method 'testLambda3 ()V' {
      5      117
      9      118
   }

   method 'testLambda4 ()V' {
      5      121
      9      122
   }

   method 'testLambda5 ()V' {
      0      125
      2      125
      5      126
      e      127
      12      128
   }

   method 'lambda$testLambda6$12 (IILjava/lang/String;)Z' {
      2      134
      5      134
      9      134
      d      134
      15      134
   }

   method 'testLambda6 ()V' {
      7      131
      9      132
      e      132
      f      132
      10      132
      12      133
      17      133
      18      133
      19      133
      22      134
      28      135
   }

   method 'testLambda7 ([Ljava/lang/annotation/Annotation;)V' {
      1      138
      9      138
      f      139
   }

   method 'reduce (Ljava/util/function/IntBinaryOperator;)Ljava/util/OptionalInt;' {
      0      142
      1      142
   }

   method 'function (Ljava/util/function/Supplier;)Ljava/lang/String;' {
      1      146
      6      146
      9      146
   }

   method 'localMax (II)I' {
      0      150
      1      150
   }

   method 'lambda$nestedLambdas$13 (I)V' {
      0      156
      4      156
      9      156
      c      157
   }

   method 'lambda$nestedLambdas$14 (I)V' {
      6      156
      7      157
      b      157
      10      157
      13      158
   }

   method 'nestedLambdas ()V' {
      0      154
      1      154
      8      158
      9      159
   }
}

Lines mapping:
34 <-> 23
35 <-> 24
36 <-> 25
38 <-> 26
40 <-> 27
41 <-> 28
42 <-> 29
43 <-> 30
44 <-> 30
45 <-> 31
46 <-> 31
47 <-> 32
48 <-> 33
57 <-> 37
61 <-> 41
65 <-> 45
69 <-> 49
70 <-> 50
71 <-> 51
72 <-> 52
74 <-> 55
79 <-> 60
80 <-> 61
81 <-> 62
82 <-> 63
83 <-> 64
85 <-> 66
86 <-> 67
87 <-> 68
88 <-> 69
89 <-> 70
91 <-> 72
99 <-> 80
102 <-> 84
105 <-> 87
109 <-> 91
113 <-> 95
114 <-> 96
116 <-> 97
117 <-> 98
118 <-> 99
119 <-> 100
120 <-> 101
123 <-> 104
124 <-> 105
125 <-> 106
126 <-> 107
129 <-> 110
130 <-> 111
131 <-> 112
132 <-> 113
133 <-> 114
134 <-> 115
137 <-> 118
138 <-> 119
141 <-> 122
142 <-> 123
145 <-> 126
146 <-> 127
147 <-> 129
150 <-> 132
151 <-> 133
152 <-> 134
153 <-> 135
154 <-> 136
157 <-> 139
158 <-> 140
161 <-> 143
165 <-> 147
169 <-> 151
173 <-> 155
174 <-> 159
175 <-> 157
176 <-> 158
177 <-> 159
178 <-> 160
